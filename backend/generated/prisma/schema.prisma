// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id
  username String
  avatar   String?

  sessions UserSession[]
  apiKeys  ApiKey[]
}

//discord/webiste login

model DiscordToken {
  accessToken  String   @id
  refreshToken String
  expiresAt    DateTime

  sessions UserSession[]
}

model UserSession {
  id             String   @id @default(uuid())
  userId         String
  discordTokenId String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  discordToken DiscordToken @relation(fields: [discordTokenId], references: [accessToken], onDelete: Cascade)

  @@index([userId])
}

model ApiKey {
  id         String   @id @default(uuid())
  hashedKey  String
  sha256Hash String   @unique
  userId     String
  createdAt  DateTime @default(now())
  active     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//spotify login

model SpotifyToken {
  id           String   @id @default(uuid())
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  expiresAt    DateTime

  discordId String @unique
}
